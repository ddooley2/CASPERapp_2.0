import os
from os.path import isfile, join
import GlobalSettings
from CSPRparser import CSPRparser
from phylo_metric import phylo_metric

"""
    Class: ot_parser - this class parses the OT files generated in DETAILED mode
    It parses the OT file and outputs it to a temporary CSV file
"""
class ot_parser():
    def __init__(self):
        self.dir = GlobalSettings.CSPR_DB + os.path.sep
        self.nt = ['A', 'C', 'G', 'T']
        self.appended_file = self.dir + 'temp_app_file.csv'

        self.offdict = dict()
        self.chromdict = dict()

    """
        get_data: this function loads the data in from the temporary OT file 
            created by the OT executable

        Parameters:
            ot_data_path: the path to the file containing the data generated by OT
            cspr_file_path: the path to the META CSPR file used in OT
    """
    def get_data(self, ot_data_path, cspr_file_path, aligned_fasta_file):
        self.offdict.clear()
        self.chromdict.clear()
        phylo = phylo_metric(aligned_fasta_file)
        chrom_temp = list()
        off_temp = list()
        fp = open(ot_data_path)

        myList = fp.read().splitlines()
        fp.close()
        good_lines = [line for line in myList if line]

        for x in good_lines:
            if x[0] in self.nt:
                y = x.split(':')
                if float(y[1]) == 0:
                    self.offdict[y[0]] = y[1]
                else:
                    temp_seq = y[0]
                    off_temp = []
                    chrom_temp = []
            elif x[0] == '0':
                line_temp = [e.strip() for e in x.split(',')]
                off_temp.append((line_temp[0]))
                chrom_temp.append(line_temp[1])
                self.offdict[temp_seq] = off_temp
                self.chromdict[temp_seq] = chrom_temp

        org_dict = phylo.run_exe(cspr_file_path)
        self.write_data(cspr_file_path, org_dict)

    """
        write_data: this function writes that data to the temp CSV file
        Parameters:
            cspr_path: the path to the metagenomic CSPR file used in OT
    """
    def write_data(self, cspr_path, distance_scores):
        # get the reference list from the cspr file containing the org names
        parser = CSPRparser(cspr_path)
        ref_list = parser.get_orgs()
        
        with open(self.appended_file, 'w+') as data_output:
            data_output.write("Sequence,Off-Target Score,Organism,Relatedness\n")
            for key, values in self.offdict.items():
                # just output the sequence and the 0 if no hits
                if float(values[0]) == 0.0000000:
                    data_output.write(str(key) + ',' + '0' + ',,' '\n')
                # if there are hits, output the organism as well, as well as every hit
                else:
                    chrom_values = self.chromdict.get(key)
                    chrom_values = self.update_chrom_values(ref_list, chrom_values)
                    for i in range(len(values)):
                        data_output.write(str(key) + ',' + str(values[i]) + ',' + str(chrom_values[i]) + ',' + str(distance_scores[chrom_values[i]]) + '\n')

    """
        update_chrom_values: this function takes the chromosome index and 
            updates it with the organism name.

        Parameters:
            ref_list: the list containing the org name/chromosome
            chrom_values: the actual chromosome values to look for

        NOTE: This assumes that the data stored in the meta CSPR file has been read in
                and is stored in the parameter ref_list
    """
    def update_chrom_values(self, ref_list, chrom_values):
        ret_list = list()

        # for each value in chrom_values, index that spot in the ref list, and get the org name
        for i in chrom_values:
            ret_list.append(str(ref_list[int(i)-1][0]))
        return ret_list
